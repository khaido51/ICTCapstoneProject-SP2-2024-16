@model List<ICTCapstoneProject.Models.CameraPosition>

@{
    ViewData["Title"] = "Detecting of Onset Of Cysbersicknees using Physiological Cues";
    ViewData["Title2"] = "Camera Position Report";
}

<style>
    [slider] {
        position: relative;
        height: 14px;
        border-radius: 10px;
        text-align: left;
        margin: 45px 0 10px 0;
    }

        [slider] > div {
            position: absolute;
            left: 13px;
            right: 15px;
            height: 14px;
        }

            [slider] > div > [inverse-left] {
                position: absolute;
                left: 0;
                height: 14px;
                border-radius: 10px;
                background-color: #CCC;
                margin: 0 7px;
            }

            [slider] > div > [inverse-right] {
                position: absolute;
                right: 0;
                height: 14px;
                border-radius: 10px;
                background-color: #CCC;
                margin: 0 7px;
            }

            [slider] > div > [range] {
                position: absolute;
                left: 0;
                height: 14px;
                border-radius: 14px;
                background-color: #1ABC9C;
            }

            [slider] > div > [thumb] {
                position: absolute;
                top: -7px;
                z-index: 2;
                height: 28px;
                width: 28px;
                text-align: left;
                margin-left: -11px;
                cursor: pointer;
                background-color: #FFF;
                border-radius: 50%;
                outline: none;
            }

        [slider] > input[type=range] {
            position: absolute;
            pointer-events: none;
            -webkit-appearance: none;
            z-index: 3;
            height: 14px;
            top: -2px;
            width: 100%;
            -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
            filter: alpha(opacity=0);
            -moz-opacity: 0;
            -khtml-opacity: 0;
            opacity: 0;
        }

    div[slider] > input[type=range]::-ms-thumb {
        pointer-events: all;
        width: 28px;
        height: 28px;
        border-radius: 0px;
        border: 0 none;
        background: red;
    }

    div[slider] > input[type=range]::-moz-range-thumb {
        pointer-events: all;
        width: 28px;
        height: 28px;
        border-radius: 0px;
        border: 0 none;
        background: red;
    }

    div[slider] > input[type=range]::-webkit-slider-thumb {
        pointer-events: all;
        width: 28px;
        height: 28px;
        border-radius: 0px;
        border: 0 none;
        background: red;
        -webkit-appearance: none;
    }

    [slider] > div > [sign] {
        opacity: 0;
        position: absolute;
        margin-left: -11px;
        top: -39px;
        z-index: 3;
        background-color: #1ABC9C;
        color: #fff;
        width: 28px;
        height: 28px;
        border-radius: 28px;
        -webkit-border-radius: 28px;
        align-items: center;
        -webkit-justify-content: center;
        justify-content: center;
        text-align: center;
    }

        [slider] > div > [sign]:after {
            position: absolute;
            content: '';
            left: 0;
            border-radius: 16px;
            top: 19px;
            border-left: 14px solid transparent;
            border-right: 14px solid transparent;
            border-top-width: 16px;
            border-top-style: solid;
            border-top-color: #1ABC9C;
        }

        [slider] > div > [sign] > span {
            font-size: 12px;
            font-weight: 700;
            line-height: 28px;
        }

    [slider]:hover > div > [sign] {
        opacity: 1;
    }

    th, td {
        font-size: 0.9em;
        padding: 8px;
    }

    .scene-name {
        font-size: 20px;
        font-weight: 500;
        padding-left: 2rem;
        margin-left: 2.5rem;
        width: 100px;
    }

    .cont-2 {
        padding-left: 1.25rem;
        margin-bottom: 1.5rem;
    }

    .form-check {
        padding-left: 4rem;
    }

    .graph-container {
        width: 100%;
        height: 500px;
        margin: auto;
        display: flex;
        justify-content: center;
        align-items: center;
    }

</style>

<section id="participant">
    <div class="container mt-3 mb-2 px-4">
        <div class="row gx-4 justify-content-center">
            <div class="col-lg-8">
                <h2>@ViewData["Title2"]</h2>
            </div>
        </div>
    </div>
</section>
<section id="scene">
    <div class="container px-4">
        <div class="row gx-4 justify-content-center">
            <div class="col-lg-8">
                <div class="scene-name"><p>Scene</p></div>
                <div class="container cont-2">
                    <div class="row">
                        <div class="col-2 d-flex align-items-center justify-content-center">
                            <div class="form-check">
                                <label class="form-check-label" for="uploadSimulatedIMUForm">
                                    SimulatedIMU
                                </label>
                            </div>
                        </div>

                        <div class="col-4 d-flex align-items-center justify-content-center">
                            <form method="post"
                                  id="uploadSimulatedIMUForm"
                                  enctype="multipart/form-data"
                                  asp-controller="CameraPosition"
                                  asp-action="Index">
                                <div class="col-md-auto d-flex align-items-center justify-content-center">
                                    <input type="file" name="file" class="form-control" />
                                </div>
                            </form>
                        </div>
                        <div class="col-2 d-flex align-items-center justify-content-center">
                            <input type="submit"
                                   form="uploadSimulatedIMUForm"
                                   value="Upload File"
                                   class="btn btn-primary" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-4">
            <select id="graphSelector" class="form-select">
                <option value="3D">3D graph(Camera Position & Velocity)</option>
                <option value="Acceleration">Acceleration graphs(Camera Acceleration & Angular Velocity)</option>
                <option value="Rotation">Rotation graphs(Camera Rotation & Angular Velocity)</option>
            </select>
        </div>
        <div class="col-lg-8">
            <label>
                <input type="radio" name="axis" class="radio" value="X" checked />X
            </label>
            <label>
                <input type="radio" name="axis" class="radio" value="Y" />Y
            </label>
            <label>
                <input type="radio" name="axis" class="radio" value="Z" />Z
            </label>
        </div>
    </div>
</div>

<div id="plotlyGraph" class="graph-container" style="display: none;"></div>
<div id="plotlyGraphAcceleration" class="graph-container" style="display: none;"></div>
<div id="plotlyGraphAngularVelocity" class="graph-container" style="display: none;"></div>
<div id="plotlyGraphRotationX" class="graph-container" style="display: none;"></div>
<div id="plotlyGraphRotationY" class="graph-container" style="display: none;"></div>
<div id="plotlyGraphRotationZ" class="graph-container" style="display: none;"></div>


<div slider id="slider-distance">

    @*the second child of the parent element*@
    <div>
        <div inverse-left style="width:70%;"></div>
        <div inverse-right style="width:70%;"></div>
        <div range style="left:0%; right:0%;"></div>
        <span thumb style="left:0%;"></span>
        <span thumb style="left:100%;"></span>
        <div sign style="left:0%;">
            <span id="value">0</span>
        </div>
        <div sign style="left:100%;">
            <span id="value">@ViewBag.MaxMinutes</span>
        </div>
    </div>

    @*input[0]*@
    <input type="range" tabindex="0" value="0" max="@ViewBag.MaxMinutes" min="0" step="1" oninput="updateMinSlider(this)" />
    @*input[1]*@
    <input type="range" tabindex="0" value="@ViewBag.MaxMinutes" max="@ViewBag.MaxMinutes" min="0" step="1" oninput="updateMaxSlider(this)" />
</div>



<div class="container px-4">
    <div class="row gx-4 justify-content-center">
        <div class="col-lg-10">
            <div class="table-responsive">
                <table class="table table-bordered mt-4" id="cameraPositionsTable">
                    <thead>
                        <tr>
                            <th>Timestamp</th>
                            <th>Segment</th>
                            <th>Camera Active</th>

                            <th>Camera Position X</th>
                            <th>Camera Position Y</th>
                            <th>Camera Position Z</th>

                            <th>CameraRotationX</th>
                            <th>CameraRotationY</th>
                            <th>CameraRotationZ</th>
                            <th>CameraRotationW</th>

                            <th>CameraVelocityX</th>
                            <th>CameraVelocityY</th>
                            <th>CameraVelocityZ</th>

                            <th>CameraAccelerationX</th>
                            <th>CameraAccelerationY</th>
                            <th>CameraAccelerationZ</th>

                            <th>CameraAngularVelocityX</th>
                            <th>CameraAngularVelocityY</th>
                            <th>CameraAngularVelocityZ</th>

                            <th>CameraAngularAccelerationX</th>
                            <th>CameraAngularAccelerationY</th>
                            <th>CameraAngularAccelerationZ</th>

                            <!-- Add other headers based on your model -->
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Math.Min(Model.Count, 10); i++)
                        {
                            var item = Model[i];
                            <tr>
                                <td>@item.Timestamp</td>
                                <td>@item.Segment</td>
                                <td>@item.CameraActive</td>

                                <td>@item.CameraPositionX</td>
                                <td>@item.CameraPositionY</td>
                                <td>@item.CameraPositionZ</td>

                                <td>@item.CameraRotationX</td>
                                <td>@item.CameraRotationY</td>
                                <td>@item.CameraRotationZ</td>
                                <td>@item.CameraRotationW</td>

                                <td>@item.CameraVelocityX</td>
                                <td>@item.CameraVelocityY</td>
                                <td>@item.CameraVelocityZ</td>

                                <td>@item.CameraAccelerationX</td>
                                <td>@item.CameraAccelerationY</td>
                                <td>@item.CameraAccelerationZ</td>

                                <td>@item.CameraAngularVelocityX</td>
                                <td>@item.CameraAngularVelocityY</td>
                                <td>@item.CameraAngularVelocityZ</td>

                                <td>@item.CameraAngularAccelerationX</td>
                                <td>@item.CameraAngularAccelerationY</td>
                                <td>@item.CameraAngularAccelerationZ</td>
                            </tr>
                        }
                    </tbody>
                </table>
                @if (Model.Count > 10)
                {
                    <button id="loadMore" class="btn btn-primary">Show More</button>
                }
            </div>
        </div>
    </div>
</div>

@if (TempData["message"] != null)
{
    <script>alert('@TempData["message"]');</script>
}


@section Scripts {
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script>
        // Fetch the Camera Position from Controller
        const modelData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model));

        let filteredDataCache = {}; // Cache for filtered data, use in filterGraphData()
        
        let debounceTimeout; // Debounce timeout


        //Display Data Table function

        const totalRows = @Model.Count; // Total number of rows available

        let displayedRows = 10; // Rows displayed

        /**
        * <summary>
        * This function improves performance 
        * by limiting the speed at which functions are called
        * 
        * Create a debounced version of function
        * Delays execution until a wait time has passed after being called
        * </summary>
        * <param name="func"> Function to debounce = optimizedFilterGraphData </param>
        * <param name="wait"> The time in "milliseconds" = 300 </param>
        * <returns>
        * A debounced version of the given function that delays its execution
        * </returns>
        * <link>https://www.freecodecamp.org/news/javascript-debounce-example/</link>
        */
        function debounce(func, wait) {
            return function (...args) {
                // Reset timer
                clearTimeout(debounceTimeout);
                // after finish the Set timer, excute the function
                debounceTimeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        /**
        * <summary>
        * Filter graph data
        * Update displayed graph based on the selected graph type and axis
        * Uses a debounced function to prevent excessive filtering and rendering during rapid slider movements.
        * </summary>
        * <param name=""></param>
        * <returns>None. Updates the displayed graph directly</returns>
        */
        const optimizedFilterGraphData = debounce(() => {
            // Filter data based on the curernt slider values
            const filteredData = filterGraphData();
            // Get selected graph type from the dropdown
            const selectedGraph = document.getElementById("graphSelector").value;
            // Get selected axix from check box
            const selectedAxis = document.querySelector('input[name="axis"]:checked').value;

            // Hide all graphs
            document.getElementById('plotlyGraph').style.display = 'none';
            document.getElementById('plotlyGraphAcceleration').style.display = 'none';
            document.getElementById('plotlyGraphAngularVelocity').style.display = 'none';
            document.getElementById('plotlyGraphRotationX').style.display = 'none';
            document.getElementById('plotlyGraphRotationY').style.display = 'none';
            document.getElementById('plotlyGraphRotationZ').style.display = 'none';

            // Show and render the appropriate graphs based on the selected graph type
            if (selectedGraph === "Acceleration") {
                renderCameraAccelerationGraph(filteredData, selectedAxis);
                renderCameraAngularVelocityGraph(filteredData, selectedAxis);
                document.getElementById('plotlyGraphAcceleration').style.display = 'block';
                document.getElementById('plotlyGraphAngularVelocity').style.display = 'block';
            } else if (selectedGraph === "Rotation") {
                renderCameraRotationGraph(filteredData);
                renderCameraAngularVelocityGraph(filteredData, selectedAxis);
                document.getElementById('plotlyGraphRotationX').style.display = 'block';
                document.getElementById('plotlyGraphRotationY').style.display = 'block';
                document.getElementById('plotlyGraphRotationZ').style.display = 'block';
                document.getElementById('plotlyGraphAngularVelocity').style.display = 'block';
            } else {
                renderPlotlyGraph(filteredData);
                document.getElementById('plotlyGraph').style.display = 'block';
            }
        }, 300);

        /**
        * <summary>
        * Initialize the event listeners 
        * Set up the initial state for the graph and data table when the DOM is fully loaded
        * </summary>
        */
        document.addEventListener("DOMContentLoaded", function () {
            // Get references to the DOM elements
            const graphSelector = document.getElementById("graphSelector");
            const axisRadios = document.querySelectorAll('input[name="axis"]');
            const plotlyGraph = document.getElementById("plotlyGraph");
            const loadMoreButton = document.getElementById("loadMore");

            // Check if DOM elements are found
            if (graphSelector && axisRadios.length > 0 && plotlyGraph) {

                // Add change event listeners to the graph selector dropdown
                graphSelector.addEventListener("change", optimizedFilterGraphData);

                // Add change event listeners to the each axis radio button
                axisRadios.forEach((radio) => {
                    radio.addEventListener("change", optimizedFilterGraphData);
                });

                // Display Initial 3D graph
                plotlyGraph.style.display = 'block';
                renderPlotlyGraph(modelData);

            } else {
                console.error("Cannot find required DOM elements");
            }

            if (totalRows >= displayedRows) {
                // Add click event listener to "Load More" button
                loadMoreButton.addEventListener("click", function () {
                    // Get table body element to insert new rows
                    const tableBody = document.getElementById("cameraPositionsTable").getElementsByTagName("tbody")[0];
                    // New target number of rows to display
                    const rowsToAdd = Math.min(displayedRows + 10, totalRows);

                    // Insert new rows into the table
                    for (let i = displayedRows; i < rowsToAdd; i++) {
                        const item = modelData[i];
                        const row = tableBody.insertRow();

                        // Add the data cells to the new row
                        row.innerHTML = `
                            <td>${item.Timestamp}</td>
                            <td>${item.Segment}</td>
                            <td>${item.CameraActive}</td>
                            <td>${item.CameraPositionX}</td>
                            <td>${item.CameraPositionY}</td>
                            <td>${item.CameraPositionZ}</td>
                            <td>${item.CameraRotationX}</td>
                            <td>${item.CameraRotationY}</td>
                            <td>${item.CameraRotationZ}</td>
                            <td>${item.CameraRotationW}</td>
                            <td>${item.CameraVelocityX}</td>
                            <td>${item.CameraVelocityY}</td>
                            <td>${item.CameraVelocityZ}</td>
                            <td>${item.CameraAccelerationX}</td>
                            <td>${item.CameraAccelerationY}</td>
                            <td>${item.CameraAccelerationZ}</td>
                            <td>${item.CameraAngularVelocityX}</td>
                            <td>${item.CameraAngularVelocityY}</td>
                            <td>${item.CameraAngularVelocityZ}</td>
                            <td>${item.CameraAngularAccelerationX}</td>
                            <td>${item.CameraAngularAccelerationY}</td>
                            <td>${item.CameraAngularAccelerationZ}</td>
                        `;
                    }

                    // Update the number of displayed rows
                    displayedRows = rowsToAdd;

                    // Hide the "Load More" button if all rows are displayed
                    if (displayedRows >= totalRows) {
                        loadMoreButton.style.display = "none";
                    }
                });
            }
        });

        /**
        * <summary>
        * Creates a 2D graph trace object for plotting with Plotly
        * Configured with the given x/y values, axis label, and color
        * </summary>
        * <param name="xValues"> Array of x-axis values for the plot</param>
        * <param name="yValues"> Array of y-axis values for the plot</param>
        * <param name="axisLabel"> String label for the axis, used as the trace name</param>
        * <param name="color"> Color of the line in the plot</param>
        * <returns>
        * Return object representing the configuration of a Plotly trace
        * </returns>
        */
        function createGraphTrace(xValues, yValues, axisLabel, color) {
            return {
                // Array
                x: xValues,
                y: yValues,

                mode: 'lines+markers',
                type: 'scatter',
                line: { 
                    color: color,
                    width: 0.3,
                },
                name: axisLabel,
                // Size of points
                marker: { size: 1 },
            };
        }

        /**
        * <summary>
        * Render a Plotly graph in a specified HTML element with given traces, title, and y-axis label
        * Configure the layout of the graph, including the title, axis labels, and margins.
        * </summary>
        * <param name="elementId"> Id of the html element where the graph will be rendered.</param>
        * <param name="traces"> Array of trace objects</param>
        * <param name="title"> Title of the graph</param>
        * <param name="yLabel"> The label for the y-axis of the graph</param>
        * <returns></returns>
        */
        function renderGraph(elementId, traces, title, yLabel) {
            const layout = {
                title: title,
                autosize: true,
                xaxis: { title: 'Time' },
                yaxis: { title: yLabel },
                margin: { l: 50, r: 50, b: 50, t: 50 }
            };

            Plotly.Plots.resize(elementId);
            Plotly.newPlot(elementId, traces, layout);
        }

        /**
        * <summary>
        * Renders a 3D Camera Position graph with velocity color coding.
        * Maps the camera positions and velocities to a 3D scatter plot, and configures the graph layout
        * </summary>
        * <param name="cameraPositions"> Array of Camera Position objects </param>
        * <returns></returns>
        * <link>https://en.wikipedia.org/wiki/Velocity for 3-dimensional velocity</link>
        */
        function renderPlotlyGraph(cameraPositions) {

            const plotlyGraph = document.getElementById('plotlyGraph');
            
            if (plotlyGraph && plotlyGraph.style.display !== 'none') {
                const xValues = cameraPositions.map(p => p.CameraPositionX);
                const yValues = cameraPositions.map(p => p.CameraPositionZ);
                const zValues = cameraPositions.map(p => p.CameraPositionY);

                // magnitude of the velocity = Square root of the sum of the square of the X,Y,Z velocity
                const velocityMagnitudes = cameraPositions.map(p => Math.sqrt(p.CameraVelocityX ** 2 + p.CameraVelocityY ** 2 + p.CameraVelocityZ ** 2));

                const trace = {
                    x: xValues,
                    y: yValues,
                    z: zValues,
                    mode: 'lines+markers',
                    type: 'scatter3d',
                    marker: {
                        size: 1,
                        color: velocityMagnitudes,
                        colorscale: 'Viridis',
                        colorbar: { title: 'Speed' },
                        opacity: 0.8
                    },
                    line: {
                        color: velocityMagnitudes,
                        colorscale: 'Viridis',
                        width: 5
                    }
                };

                const layout = {
                    title: '3D Trajectory of Camera with Velocity Color Coding',
                    autosize: true,
                    scene: {
                        xaxis: { title: 'X Position (meters)' },
                        yaxis: { title: 'Y Position (meters)' },
                        zaxis: { title: 'Z Position (meters)' }
                    },
                    margin: { l: 50, r: 50, b: 50, t: 50 }
                };

                Plotly.newPlot('plotlyGraph', [trace], layout);
                Plotly.Plots.resize('plotlyGraph');
            } else {
                console.error("Plotly elements cannot find or not shown")
            }
        }

        // Render Acceleration graph
        function renderCameraAccelerationGraph(cameraPositions, axis) {
            const xValues = cameraPositions.map(p => p.Timestamp);
            let yValues;
            let yLabel;

            switch (axis) {
                case 'X':
                    yValues = cameraPositions.map(p => p.CameraAccelerationX);
                    yLabel = 'Acceleration X (m/s²)';
                    break;
                case 'Y':
                    yValues = cameraPositions.map(p => p.CameraAccelerationY);
                    yLabel = 'Acceleration Y (m/s²)';
                    break;
                case 'Z':
                    yValues = cameraPositions.map(p => p.CameraAccelerationZ);
                    yLabel = 'Acceleration Z (m/s²)';
                    break;
                default:
                    yValues = cameraPositions.map(p => p.CameraAccelerationX);
                    yLabel = 'Acceleration X (m/s²)';
                    break;
            }

            const trace = createGraphTrace(xValues, yValues, `Camera Acceleration ${axis}`, 'blue');
            renderGraph('plotlyGraphAcceleration', [trace], `Camera Acceleration ${axis} Over Time`, yLabel);
        }

        // Render Angular Velocity graph
        function renderCameraAngularVelocityGraph(cameraPositions, axis) {
            const xValues = cameraPositions.map(p => p.Timestamp);
            let yValues;
            let yLabel;

            switch (axis) {
                case 'X':
                    yValues = cameraPositions.map(p => p.CameraAngularVelocityX);
                    yLabel = 'Angular Velocity X (rad/s)';
                    break;
                case 'Y':
                    yValues = cameraPositions.map(p => p.CameraAngularVelocityY);
                    yLabel = 'Angular Velocity Y (rad/s)';
                    break;
                case 'Z':
                    yValues = cameraPositions.map(p => p.CameraAngularVelocityZ);
                    yLabel = 'Angular Velocity Z (rad/s)';
                    break;
                default:
                    yValues = cameraPositions.map(p => p.CameraAngularVelocityX);
                    yLabel = 'Angular Velocity X (rad/s)';
                    break;
            }

            const trace = createGraphTrace(xValues, yValues, `Camera Angular Velocity ${axis}`, 'red');
            renderGraph('plotlyGraphAngularVelocity', [trace], `Camera Angular Velocity ${axis} Over Time`, yLabel);
        }

        // Render Rotation graph
        function renderCameraRotationGraph(cameraPositions) {
            const xValues = cameraPositions.map(p => p.Timestamp);
            const yValuesX = cameraPositions.map(p => p.CameraRotationX);
            const yValuesY = cameraPositions.map(p => p.CameraRotationY);
            const yValuesZ = cameraPositions.map(p => p.CameraRotationZ);

            const traceX = createGraphTrace(xValues, yValuesX, 'Camera Rotation X (quaternion)', 'purple');
            const traceY = createGraphTrace(xValues, yValuesY, 'Camera Rotation Y (quaternion)', 'green');
            const traceZ = createGraphTrace(xValues, yValuesZ, 'Camera Rotation Z (quaternion)', 'blue');

            renderGraph('plotlyGraphRotationX', [traceX], 'Camera Rotation X Over Time', 'Rotation X (quaternion)');
            renderGraph('plotlyGraphRotationY', [traceY], 'Camera Rotation Y Over Time', 'Rotation Y (quaternion)');
            renderGraph('plotlyGraphRotationZ', [traceZ], 'Camera Rotation Z Over Time', 'Rotation Z (quaternion)');
        }

        
        // Time Range slider

        /**
        * <summary>
        * Updates the value of the minimum range slider
        * and ensures it doesn't exceed the max slider's value
        * </summary>
        * <param name="input"> Input the minimum range slider element </param>
        * <returns>None. Update the slider value, display, and filter the graph data</returns>
        */
        function updateMinSlider(input) {

            // Get the maximum slider input element
            var maxInput = input.parentNode.getElementsByTagName('input')[1];

            // Don't exceed the maximum slider's value
            if (parseInt(input.value) >= parseInt(maxInput.value)) {
                input.value = parseInt(maxInput.value) - 1;
            }

            // Update slider display to reflect the new min value
            updateSliderDisplay(input);

            // Filter and update graph based on the new range
            optimizedFilterGraphData();
        }

        /**
        * <summary>
        * Updates the value of the maximum range slider
        * and ensures it doesn't exceed min slider's value
        * </summary>
        * <param name="input"> Input the maximum range slider element </param>
        * <returns>None. Updates the slider value, display, and filter the graph data </returns>
        */
        function updateMaxSlider(input) {

            // Get the minimum slider input element
            var minInput = input.parentNode.getElementsByTagName('input')[0];

            // Ensure the maximum slider's value does not go below the minimum slider's value
            if (parseInt(input.value) <= parseInt(minInput.value)) {
                input.value = parseInt(minInput.value) + 1;
            }

            // Update slider display to reflect the new max value
            updateSliderDisplay(input);

            // Filter and update graph based on the new range
            optimizedFilterGraphData();
        }


        /**
        * <summary>
        * Updates slider display based on the new value
        * Adjust elements to reflect the new value
        * </summary>
        * <param name="input"> Input range slider element (Max/Min) </param>
        * <returns>None. Update the slider's display </returns>
        * <link>https://codepen.io/glitchworker/pen/XVdKqj
        * Time range slider's css elements and html structure are also cited
        * </link>
        */
        function updateSliderDisplay(input) {
            // Calculate the value as % of the Total range
            const value = (100 / (parseInt(input.max) - parseInt(input.min))) * parseInt(input.value) - (100 / (parseInt(input.max) - parseInt(input.min))) * parseInt(input.min);

            // Get child elements of the slider container <div slider>
            const children = input.parentNode.childNodes[1].childNodes;

            // Check if input = min slider
            if (input === input.parentNode.getElementsByTagName('input')[0]) {
                // inverse-left width
                children[1].style.width = value + '%';
                // range left position
                children[5].style.left = value + '%';
                // thumb left position
                children[7].style.left = value + '%';
                // sign left position
                children[11].style.left = value + '%';
                // Update value to match the new value
                children[11].childNodes[1].innerHTML = input.value;
            } else {
                // inverse-right width
                children[3].style.width = (100 - value) + '%';
                // range right position
                children[5].style.right = (100 - value) + '%';
                // thumb left position
                children[9].style.left = value + '%';
                // sign left position
                children[13].style.left = value + '%';
                // Update value to match the new value
                children[13].childNodes[1].innerHTML = input.value;
            }
        }

        /**
        * <summary>
        * Filters the graph data based on the current values of the minimum and maximum range sliders.
        * Retrieves the current slider values, checks if the filtered data is already cached, and if not,
        * filters the data according to the specified range. The filtered data is then cached for future use.
        * </summary>
        * <param name=""></param>
        * <returns>
        * Return Array of filtered data points within the specified time range
        * </returns>
        */
        function filterGraphData() {
            // Get the current values of Min/Max time range slider
            const minSliderValue = parseInt(document.getElementById('slider-distance').getElementsByTagName('input')[0].value);
            const maxSliderValue = parseInt(document.getElementById('slider-distance').getElementsByTagName('input')[1].value);
            
            // Create string cache key for time range
            const cacheKey = `${minSliderValue}-${maxSliderValue}`;

            // Check if filtered data for the range is already cached
            if (filteredDataCache[cacheKey]) {
                // Return the cached data if available
                return filteredDataCache[cacheKey];
            }

            // Filter data based on time range
            const filteredData = modelData.filter(p => {
                // Calculate time difference in minutes from first timestamp (convert the milliseconds to minutes / 6000)
                const minutes = (new Date(p.Timestamp) - new Date(modelData[0].Timestamp)) / 60000;
                // Inclue data points within the slider's range
                return minutes >= minSliderValue && minutes <= maxSliderValue;
            });

            // Cache the filtered data for next use
            filteredDataCache[cacheKey] = filteredData;

            return filteredData;
        }

    </script>
}