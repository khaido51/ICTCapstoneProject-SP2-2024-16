@using System.Text.Json;
@model MultipleReports
@{
    ViewData["Title"] = "Detecting of Onset Of Cysbersicknees using Physiological Cues";
    ViewData["Title2"] = "Multiple Self-Report";
}
<div class="container px-4">
    <div class="row gx-4 center justify-content-center align-items-center">
        <div class="col-lg-8 text-center text-center">
            <h1>@ViewData["Title"]</h1>

        </div>
    </div>
</div>




<style>
    /*  body {
                  margin-top: 4rem;
                  margin-right: 5rem;
                  margin-left: 5rem;
                } */
    table,
    th,
    td {
        border: 1px solid black;
        border-collapse: collapse;
    }
    /* setting the text-align property to center*/
    td {
        padding: 5px;
        text-align: center;
    }
    .name-1 {
        width: fit-content;
        padding: 1rem 2rem 0.5rem 2rem;
    }

    .list-inline p {
        font-size: 20px;
        font-weight: 500;
    }

    .list-inline-item {
        padding: 1rem 5rem 1rem 4rem;
    }

    .scene-name {
        font-size: 20px;
        font-weight: 500;
        padding-left: 2rem;
        margin-left: 2.5rem;
        width: 100px;
    }

    .cont-2 {
        padding-left: 1.25rem;
        margin-bottom: 1.5rem;
    }

    .form-check {
        padding-left: 4rem; /* Adjusted padding */
    }
</style>
<section id="participant">
    <div class="container mt-3 mb-2 px-4">
        <div class="row gx-4 justify-content-center">
            <div class="col-lg-8">
                <h2>@ViewData["Title2"]</h2>
              
            </div>
        </div>
    </div>
</section>
<section id="scene">
    <div class="container px-4">
        <div class="row gx-4 justify-content-center">
            <div class="col-lg-8">
                <div class="scene-name"><p>Scene</p></div>
                <div class="container cont-2">
                    <div class="row">
                        <div class="col-2 d-flex align-items-center justify-content-center">
                            <div class="form-check">
                                <input class="form-check-input"
                                       type="checkbox"
                                       id="baseline" 
                                       onclick="isChecked(this)"/>
                                <label class="form-check-label" for="baseline">
                                    Baseline
                                </label>
                            </div>
                        </div>

                        <div class="col-4 d-flex align-items-center justify-content-center">
                            <form method="post"
                                  id="uploadBaselineForm"
                                  enctype="multipart/form-data"
                                  asp-controller="MultipleReports"
                                  asp-action="Index">
                                <div class="col-md-auto d-flex align-items-center justify-content-center">
                                    <input id="uploadFile" type="file" name="files" class="form-control" multiple required/>
                                </div>
                            </form>
                        </div>
                        <div class="col-2 d-flex align-items-center justify-content-center">
                            <input type="submit"
                                   id="submit"
                                   form="uploadBaselineForm"
                                   value="Upload File"
                                   class="btn btn-primary" />

                        </div>
                    </div>
                </div>
                <div>
                    <div class="container cont-2">
                        <div class="row">

                            <div class="col-2 d-flex align-items-center justify-content-center">
                                <div class="form-check">
                                    <input class="form-check-input"
                                           type="checkbox"
                                           id="passive" 
                                           onclick="isChecked(this)" />
                                    <label class="form-check-label" for="passive">
                                        Passive
                                    </label>
                                </div>
                            </div>

                            <div class="col-4 d-flex align-items-center justify-content-center">
                                <form method="post"
                                      id="uploadPassiveForm"
                                      enctype="multipart/form-data"
                                      asp-controller="SelfReport"
                                      asp-action="Index">
                                    <div class="col-md-auto d-flex align-items-center justify-content-center">
                                        <input type="file" name="file" class="form-control" />
                                    </div>
                                </form>
                            </div>
                            <div class="col-2 d-flex align-items-center justify-content-center">
                                <input type="submit"
                                       form="uploadPassiveForm"
                                       value="Upload File"
                                       class="btn btn-primary" />
                            </div>
                        </div>
                    </div>
                </div>

                <div>
                    <div class="container cont-2">
                        <div class="row">
                            <div class="col-2 d-flex align-items-center justify-content-center">
                                <div class="form-check">
                                    <input class="form-check-input"
                                           type="checkbox"
                                           id="active" 
                                           onclick="isChecked(this)" />
                                    <label class="form-check-label" for="active">
                                        Active
                                    </label>
                                </div>
                            </div>

                            <div class="col-4 d-flex align-items-center justify-content-center">
                                <form method="post"
                                      id="uploadActiveForm"
                                      enctype="multipart/form-data"
                                      asp-controller="SelfReport"
                                      asp-action="Index">
                                    <div class="col-md-auto d-flex align-items-center justify-content-center">
                                        <input type="file" name="file" class="form-control" />
                                    </div>
                                </form>
                            </div>
                            <div class="col-2 d-flex align-items-center justify-content-center">
                                <input type="submit"
                                       form="uploadActiveForm"
                                       value="Upload File"
                                       class="btn btn-primary" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<div class="container px-4">
    <div class="row gx-4 justify-content-center">
        <div class="col-lg-10">
   
            @if (Model.selfReportsDictionary != null && Model.selfReportsDictionary.Count > 0)
            {
                @foreach (var selfReportDic in Model.selfReportsDictionary)
                {
                    <hr />
                    <h3>Table for Key: @selfReportDic.Key</h3>
                    <table cellpadding="0" cellspacing="0" border="1">
                       
                        <tr>
                            <td>TimeStamp</td>
                            <td>Segment</td>
                            <td>SelfReport</td>
                        </tr>
                        @foreach (var selfReport in @selfReportDic.Value)
                        {
                            
                            <tr>
                                <td>@selfReport.timeStamp</td>
                                <td>@selfReport.segment</td>
                                <td>@selfReport.selfReport</td>
                            </tr>
                        }
                    </table>
                }
            }
            else
            {
                
                <p class="overflow-hidden">No Data</p>
            }
            
            <h2>Average Table</h2>
            @if (Model.averageSelfReport != null && Model.averageSelfReport.Count > 0)
            {
                <hr />
                <table cellpadding="0" cellspacing="0" border="1">
                    <style>
                        table,
                        th,
                        td {
                            border: 1px solid black;
                            border-collapse: collapse;
                        }
                        /* setting the text-align property to center*/
                        td {
                            padding: 5px;
                            text-align: center;
                        }
                    </style>
                    <tr>
                        <td>TimeStamp</td>
                        <td>Segment</td>
                        <td>SelfReport</td>
                    </tr>
                    @foreach (SelfReport selfReport in Model.averageSelfReport)
                    {
                        <tr>
                            <td>@selfReport.timeStamp</td>
                            <td>@selfReport.segment</td>
                            <td>@selfReport.selfReport</td>
                        </tr>
                    }
                </table>
            }
           
              
            
        </div>
    </div>
</div>

<script>
    // Get the file input element
    const fileInput = document.getElementById('uploadFile');

    // Add an event listener to handle file selection
    fileInput.addEventListener('change', handleFileSelect);

    function handleFileSelect(event) {
        // Get the selected files
        const files = event.target.files;

        // Iterate over each selected file
        for (let i = 0; i < files.length; i++) {
            const file = files[i];

            // Here, you can perform any processing or validation on the file
            // For example, you can upload the file using AJAX

            // Display a message for each selected file
            console.log(`Selected file: ${file.name}`);
        }
    }
</script>

<script>
  
    
</script>

<body>
    <div id="graph-container">
    <script src="https://d3js.org/d3.v7.min.js"></script>

    <script>
           
            var selfReportsDictionaryJson = @Html.Raw(Json.Serialize(Model.selfReportsDictionary));
            console.log(selfReportsDictionaryJson);

            var selfReportsArray = [];
            for (var key in selfReportsDictionaryJson) {
                if (selfReportsDictionaryJson.hasOwnProperty(key)) {
                    var item = {
                        key: key,
                        value: selfReportsDictionaryJson[key]
                    };
                    selfReportsArray.push(item);
                }
            }

            // Now you can iterate over the array
            selfReportsArray.forEach((item) => {
                console.log("Key: ", item.key);
                console.log("Value: ", item.value);
               
                const margin = { top: 70, right: 30, bottom: 40, left: 80 };
                const width = 1200 - margin.right - margin.left;
                const height = 500 - margin.top - margin.bottom;

                //set up the x and y scales
                const x = d3.scaleTime()
                    .range([0, width]);
                const y = d3.scaleLinear()
                    .range([height, 0]);

                const svg = d3.select('#graph-container')
                    .append("svg")
                    .attr('width', width + margin.right + margin.left)
                    .attr('height', height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", `translate(${margin.left}, ${margin.top})`);

                item.value.forEach(function (d) {
                    d.timeStamp = new Date(d.timeStamp);        
                    d.segment = +d.segment; //                  
                    d.selfReport = +d.selfReport;
                    
                });
               
               

                // Define the x and y domains
                x.domain(d3.extent(item.value, s => s.segment));
                y.domain([0, d3.max(item.value, s => s.selfReport)]);
                console.log(x, y);


                // y.domain([0, d3.max(selfReports, s => s.selfReport)]);

                // Add the x-axis

                svg.append("g")
                    .attr("transform", `translate(0,${height})`)
                    .call(d3.axisBottom(x)
                    .ticks(10)
                    .tickFormat(d3.format("d")));

                //Add the y-axis
                svg.append("g")
                    .call(d3.axisLeft(y))

                

                const lineSelfReport = d3.line()
                    .x(s => x(s.segment))
                    .y(s => y(s.selfReport));

              

                //Add the lineSegment to the SVG element
                svg.append("path")
                    .datum(item.value)
                    .attr("fill", "none")
                    .attr("stroke", "red")
                    .attr("stroke-width", 3)
                    .attr("d", lineSelfReport);

            });

            const margin = { top: 70, right: 30, bottom: 40, left: 80 };
            const width = 1200 - margin.left - margin.right;
            const height = 500 - margin.top - margin.bottom;

            //set up the x and y scales
            const x = d3.scaleTime()
                .range([0, width]);
            const y = d3.scaleLinear()
                .range([height, 0]);

            //create the SVG element and append it to the chart container
            const svg = d3.select("#graph-container")
                .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);


            //create a dump dataset
            var selfReports = @Html.Raw(Json.Serialize(Model.averageSelfReport));
            console.log(selfReports);

            /*
            selfReports.forEach(function (d) {
                d.timeStamp = new Date(d.timeStamp); // Assuming TimeStamp is a date string
                d.segment = +d.segment; // Convert to number using unary operator
                d.selfReport = +d.selfReport; // Convert to number using unary operator
            });
            */
            // Define the x and y domains

            x.domain(d3.extent(selfReports, s => s.segment));
            y.domain([0, d3.max(selfReports, s => s.selfReport)]);

            // y.domain([0, d3.max(selfReports, s => s.selfReport)]);

            // Add the x-axis

            svg.append("g")
                .attr("transform", `translate(0,${height})`)
                .call(d3.axisBottom(x)
                 .ticks(10)
                 .tickFormat(d3.format("d")));

            //Add the y-axis
            svg.append("g")
                .call(d3.axisLeft(y))

            //Create the line generator
         
            const lineSelfReport = d3.line()
                .x(s => x(s.segment))
                .y(s => y(s.selfReport));

            //Add the lineSegment to the SVG element
            svg.append("path")
                .datum(selfReports)
                .attr("fill", "none")
                .attr("stroke", "red")
                .attr("stroke-width", 3)
                .attr("d", lineSelfReport);

      
        
    </script>
       
    </div>

</body>