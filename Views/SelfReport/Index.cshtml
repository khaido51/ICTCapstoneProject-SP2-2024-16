@{
    ViewData["Title"] = "Detecting of Onset Of Cybersickness using Physiological Cues";
    ViewData["Title2"] = "Self Report";
}
<div class="container px-4">
    <div class="row gx-4 center justify-content-center align-items-center">
        <div class="col-lg-8 text-center">
            <h1>@ViewData["Title"]</h1>
        </div>
    </div>
</div>

<section id="scene">
    <div class="container px-4">
        <div class="row gx-4 justify-content-center">
            <div class="col-lg-8">
                <form method="post" enctype="multipart/form-data">
                    <div class="scene-name"><h5>Scene:</h5></div>

                    <div class="container cont-2">
                        <div class="row">
                            <div class="col-2 d-flex align-items-center justify-content-center">
                                <div for="baseline">Baseline</div>
                            </div>
                            <div class="col-6 d-flex align-items-center justify-content-center">
                                <input type="file" name="baselineFiles" class="form-control" multiple />
                            </div>
                        </div>
                    </div>

                    <div class="container cont-2">
                        <div class="row">
                            <div class="col-2 d-flex align-items-center justify-content-center">
                                <div for="passive">Passive</div>
                            </div>
                            <div class="col-6 d-flex align-items-center justify-content-center">
                                <input type="file" name="passiveFiles" class="form-control" multiple />
                            </div>
                        </div>
                    </div>

                    <div class="container cont-2">
                        <div class="row">
                            <div class="col-2 d-flex align-items-center justify-content-center">
                                <div for="active">Active</div>
                            </div>
                            <div class="col-6 d-flex align-items-center justify-content-center">
                                <input type="file" name="activeFiles" class="form-control" multiple />
                            </div>
                        </div>
                    </div>
                    <div class="container cont-2">
                        <div class="row">
                            <div class="col-8 d-flex justify-content-end">
                                <input type="submit" value="Upload Files" class="btn btn-primary" />
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</section>

<button id="downloadButton">Download as PNG</button>
<div id="chart-container" class="container px-4"></div>
<div>
    <input type="checkbox" id="showBaseline" checked> Baseline
    <input type="checkbox" id="showPassive" checked> Passive
    <input type="checkbox" id="showActive" checked> Active
</div>

<div class="container px-4">
    <div class="row gx-4 justify-content-center">
        <div class="col-lg-10">
            @if (Model.Count > 0)
            {
                <hr />
                <table cellpadding="0" cellspacing="0" border="1">
                    <tr>
                        <td>TimeStamp</td>
                        <td>Segment</td>
                        <td>Scene Type</td>
                        <td>SelfReport</td>
                    </tr>
                    @foreach (SingleSelfReport selfReport in Model)
                    {
                        <tr>
                            <td>@selfReport.timeStamp</td>
                            <td>@selfReport.segment</td>
                            <td>@selfReport.sceneType</td>
                            <td>@selfReport.selfReport</td>
                        </tr>
                    }
                </table>
            }
        </div>
    </div>
</div>

@if (TempData["message"] != null)
{
    <script>alert('@TempData["message"]');</script>
}

<body>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }

        table,
        th,
        td {
            border: 1px solid black;
            border-collapse: collapse;
        }
        /* setting the text-align property to center */
        td {
            padding: 5px;
            text-align: center;
        }
    </style>

    <script>
        // Set dimensions and margins for the chart
        const margin = { top: 150, right: 30, bottom: 40, left: 80 };
        const width = 1200 - margin.left - margin.right;
        const height = 500 - margin.top - margin.bottom;

        // Create the SVG element and append it to the chart container
        const svg = d3.select("#chart-container")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        // Add a legend above the chart and align it to the right
        const legend = svg.append("g")
            .attr("transform", `translate(${width - 100}, -60)`);

        // Define a color scale
        const color = d3.scaleOrdinal()
            .domain(["Baseline", "Passive", "Active"])
            .range(["red", "blue", "green"]);

        // Select and create legend items for each scene type
        const legendItems = legend.selectAll(".legend-item")
            .data(color.domain())
            .enter().append("g")
            .attr("class", "legend-item")
            .attr("transform", (d, i) => `translate(0, ${i * 20})`);

        // Append colored rectangle
        legendItems.append("rect")
            .attr("x", 0)
            .attr("width", 18)
            .attr("height", 18)
            // fill the color based on specific scene type
            .style("fill", color);

        // Append text labels to each legend item
        legendItems.append("text")
            .attr("x", 24)
            .attr("y", 9)
            .attr("dy", ".35em")
            .style("text-anchor", "start")
            .text(d => d);

        // Define the scales
        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        // Parse the data
        var selfReports = @Html.Raw(Json.Serialize(Model));
        console.log(selfReports);

        // Define the x and y domains
        x.domain([0, d3.max(selfReports, d => d.segment)]);
        y.domain([0, d3.max(selfReports, d => d.selfReport)]);

        // Define the line generators for each scene type
        const lineGenerator = sceneType => d3.line()
            .x(d => x(d.segment))
            .y(d => y(d.selfReport))
            .defined(d => d.sceneType === sceneType);

        // Function to update the chart
        function updateChart() {
            svg.selectAll(".line").remove();
            const scenesToShow = [];
            if (document.getElementById("showBaseline").checked) scenesToShow.push("Baseline");
            if (document.getElementById("showPassive").checked) scenesToShow.push("Passive");
            if (document.getElementById("showActive").checked) scenesToShow.push("Active");

            scenesToShow.forEach(sceneType => {
                svg.append("path")
                    .datum(selfReports)
                    .attr("class", "line")
                    .attr("stroke", color(sceneType))
                    .attr("d", lineGenerator(sceneType));
            });
        }
        // Add the x-axis
        svg.append("g")
            .attr("transform", `translate(0,${height})`)
            .call(d3.axisBottom(x).ticks(10));

        // Add the y-axis
        svg.append("g")
            .call(d3.axisLeft(y));

        // Initial chart rendering
        updateChart();

        // Add event listeners to the checkboxes
        document.getElementById("showBaseline").addEventListener("change", updateChart);
        document.getElementById("showPassive").addEventListener("change", updateChart);
        document.getElementById("showActive").addEventListener("change", updateChart);

        // Function to download the SVG as PNG
        function downloadSVGAsPNG() {
            const svgElement = document.querySelector("#chart-container");
            html2canvas(svgElement).then(canvas => {
                // Get the image data as a base64-encoded string
                const imageData = canvas.toDataURL("image/png");
                //Saving image as a png file
                //Create an anchor element and trigger a download action
                const link = document.createElement("a");
                link.setAttribute("download", "graph.png");
                link.setAttribute("href", imageData);
                link.click();

            });
        }

        document.getElementById("downloadButton").addEventListener("click", downloadSVGAsPNG);

    </script>
</body>



