@{
    ViewData["Title"] = "Detecting of Onset Of Cysbersicknees using Physiological Cues";
    ViewData["Title2"] = "GSR Report From GSR Controller";
}
<div class="container px-4">
    <div class="row gx-4 center justify-content-center align-items-center">
        <div class="col-lg-8 text-center text-center">
            <h1>@ViewData["Title"]</h1>

        </div>
    </div>
</div>





<style>
    /*  body {
                  margin-top: 4rem;
                  margin-right: 5rem;
                  margin-left: 5rem;
                } */
    .name-1 {
        width: fit-content;
        padding: 1rem 2rem 0.5rem 2rem;
    }

    .list-inline p {
        font-size: 20px;
        font-weight: 500;
    }

    .list-inline-item {
        padding: 1rem 5rem 1rem 4rem;
    }

    .scene-name {
        font-size: 20px;
        font-weight: 500;
        padding-left: 2rem;
        margin-left: 2.5rem;
        width: 100px;
    }

    .cont-2 {
        padding-left: 1.25rem;
        margin-bottom: 1.5rem;
    }

    .form-check {
        padding-left: 4rem; /* Adjusted padding */
    }
</style>
<section id="participant">
    <div class="container mt-3 mb-2 px-4">
        <div class="row gx-4 justify-content-center">
            <div class="col-lg-8">
                <h2>@ViewData["Title2"]</h2>
                <ul class="list-inline">
                    <div class="name-1"><p>Paritipant</p></div>
                    <li class="list-inline-item">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="single" />
                            <label class="form-check-label" for="single"> Single </label>
                        </div>
                    </li>
                    <li class="list-inline-item">
                        <div class="form-check">
                            <input class="form-check-input"
                                   type="checkbox"
                                   id="Multiple" />
                            <label class="form-check-label" for="Multiple">
                                Multiple
                            </label>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</section>
<section id="scene">
    <div class="container px-4">
        <div class="row gx-4 justify-content-center">
            <div class="col-lg-8">
                <div>
                    <div class="container cont-2">
                        <div class="row">
                            <div class="col-2 d-flex align-items-center justify-content-center">
                                <div class="form-check">
                                    <input class="form-check-input"
                                           type="checkbox"
                                           id="passive" />
                                    <label class="form-check-label" for="passive">
                                        Shimmer
                                    </label>
                                </div>
                            </div>

                            <div class="col-4 d-flex align-items-center justify-content-center">
                                <form method="post"
                                      id="uploadPassiveForm"
                                      enctype="multipart/form-data"
                                      asp-controller="GSR"
                                      asp-action="Index">
                                    <div class="col-md-auto d-flex align-items-center justify-content-center">
                                        <input type="file" name="file" class="form-control" />
                                    </div>
                                </form>
                            </div>
                            <div class="col-2 d-flex align-items-center justify-content-center">
                                <input type="submit"
                                       form="uploadPassiveForm"
                                       value="Upload File"
                                       class="btn btn-primary" />
                            </div>
                        </div>
                    </div>
                </div>

                
            </div>
        </div>
    </div>
</section>
<!--
<div class="container px-4">
    <div class="row gx-4 justify-content-center">
        <div class="col-lg-10">
            @if (Model.Count > 0)
            {
                <hr />
                <table cellpadding="0" cellspacing="0" border="1">
                    <style>
                        table,
                        th,
                        td {
                            border: 1px solid black;
                            border-collapse: collapse;
                        }
                        /* setting the text-align property to center*/
                        td {
                            padding: 5px;
                            text-align: center;
                        }
                    </style>
                    <tr>
                        <td>Ms</td>
                        <td>No_Units</td>
                        <td>uS</td>
                        <td>kOhms</td>
                        <td>mV</td>
                    </tr>
                    @foreach (GSR gsrReport in Model)
                    {
                        <tr>

                            <td>@gsrReport.ms</td>
                            <td>@gsrReport.noUnits</td>
                            <td>@gsrReport.uS</td>
                            <td>@gsrReport.kOhms</td>
                            <td>@gsrReport.mV</td>
                         
                        </tr>
                    }
                </table>
            }
        </div>
    </div>
</div>
-->

@if (TempData["message"] != null)
{
    <script>alert('@TempData["message"]');</script>    
}

<body>
    <div id="chart-container"></div>
    <div id="vertical-slider"></div>
    <div id="slider-range"></div>


    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://unpkg.com/d3-simple-slider"></script>
    <script src="https://unpkg.com/d3-simple-slider"></script>
    <style>
        .bar {
            fill: navy;
        }
    </style>
<script>
        //Set dimensions and margins for the chart

        const margin = { top: 70, right: 60, bottom: 40, left: 80 };
        const width = 1200 - margin.left - margin.right;
        const height = 500 - margin.top - margin.bottom;


        // Set up the x and y scales
        const x = d3.scaleTime().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        // Create the SVG element and append it to the chart container
        const svg = d3.select("#chart-container")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        // Dataset conversion
        var gsrReport = @Html.Raw(Json.Serialize(Model));
        console.log(gsrReport);
       
        gsrReport.forEach(function (d) {
            d.tSpan = new Date(d.tSpan); // Convert to Date object
            d.noUnits = +d.noUnits;
            d.uS = +d.uS;
            d.kOhms = parseFloat(d.kOhms);
            d.mV = parseFloat(d.mV);

            //Create current Date value to assign Minutes and Seconds
            const dayTest = new Date();
            const timeString = d.xValueTspan;
            const parts = timeString.split(":");
            const minutes = parseInt(parts[1], 10);
            const seconds = parseInt(parts[2]);

            dayTest.setMinutes(minutes);
            dayTest.setSeconds(seconds);
            
            //console.log(dayTest.toString("YYYY-MM-DD HH:mm:ss fff"));
            d.xValueTspan = dayTest;

        });

        // Initialize horizontal and vertical ranges
        let horizontalRange = d3.extent(gsrReport, s => s.xValueTspan);
        let verticalRange = [0, d3.max(gsrReport, s => s.uS)];

        // Define the x and y domains
        x.domain(horizontalRange);
        y.domain(verticalRange);

        console.log("x domain:", x.domain());
        console.log("y domain:", y.domain());

        // Add the x-axis
        svg.append("g")
            .attr("class", "x-axis")
            .attr("transform", `translate(0,${height})`)
            .call(d3.axisBottom(x)
                .ticks(d3.timeMinute.every(1))
                .tickFormat(d3.timeFormat("%M:%S")));

        // Add the y-axis
        svg.append("g")
            .attr("class", "y-axis")
            .call(d3.axisLeft(y));

        // Create the line generator
        const msLine = d3.line()
            .x(s => x(s.xValueTspan))
            .y(s => y(s.uS));

        // Add the line to the SVG
        svg.append("path")
            .datum(gsrReport)
            .attr("class", "line")
            .attr("fill", "none")
            .attr("stroke", "steelblue")
            .attr("stroke-width", 3)
            .attr("d", msLine);

        // Slider configuration
        const horizontalSlider = d3.sliderBottom()
            .min(d3.min(gsrReport, d => d.xValueTspan))
            .max(d3.max(gsrReport, d => d.xValueTspan))
            .width(400)
            .tickFormat(d3.timeFormat("%M:%S"))
            .ticks(3)
            .default(horizontalRange)
            .fill('#85bb65');

        const verticalSlider = d3.sliderLeft()
            .min(0)
            .max(d3.max(gsrReport, d => d.uS))
            .height(250)
            .ticks(5)
            .default(verticalRange)
            .fill('#85bb65');

        // Update function to redraw the graph
        function updateGraph() {
            //filtering data between min and max value range from user's input for both xaxis and yaxis
            const filteredData = gsrReport.filter(d => 
                    d.xValueTspan >= horizontalRange[0] && d.xValueTspan <= horizontalRange[1]
                    && d.uS >= verticalRange[0] && d.uS <= verticalRange[1]
            );

            //Update the x and y domain with latest range
            x.domain(horizontalRange);
            y.domain(verticalRange);


            // Update the line generator function based on new x and y domain
            const line = d3.line()
                .x(d => x(d.xValueTspan))
                .y(d => y(d.uS));

            //Update value on xAxis for new range
            svg.select(".x-axis")
                .call(d3.axisBottom(x)
                    .ticks(d3.timeMinute.every(1))
                    .tickFormat(d3.timeFormat("%M:%S")));

            //Update value on yAxis for new range
            svg.select(".y-axis")
                .call(d3.axisLeft(y));

            // Update the line
            svg.select(".line")
                .datum(filteredData)
                .attr("d", line);
        }

        // Horizontal slider onchange
        horizontalSlider.on('onchange', val => {
            horizontalRange = val;
            updateGraph();
        });

        // Vertical slider onchange
        verticalSlider.on('onchange', val => {
            verticalRange = val;
            updateGraph();
        });

        // Append horizontal slider
        d3.select("#slider-range")
            .append("svg")
            .attr("width", 500)
            .attr("height", 100)
            .append("g")
            .attr("transform", "translate(90,30)")
            .call(horizontalSlider);

        // Append vertical slider
        d3.select("#vertical-slider")
            .append("svg")
            .attr("width", 100)
            .attr("height", 300)
            .append("g")
            .attr("transform", `translate(${margin.left + width + 20}, 10)`)
            .call(verticalSlider);

       
        
</script>
</body>